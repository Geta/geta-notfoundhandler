@*
    ====================================
    Version: 5.0.0.0. Modified: 20210818
    ====================================
*@

@using EPiServer.ServiceLocation
@using EPiServer.Forms
@using EPiServer.Forms.Core
@using EPiServer.Forms.Core.Internal
@using EPiServer.Forms.Helpers.Internal
@using EPiServer.Forms.EditView.Internal
@using EPiServer.Forms.Implementation.Elements
@using EPiServer.Web.Mvc.Html
@using EPiServer.Web
@using EPiServer.Shell.Web.Mvc.Html

@model EPiServer.Forms.Implementation.Elements.FormContainerBlock

@{
    var formConfig = ServiceLocator.Current.GetInstance<EPiServer.Forms.Configuration.IEPiServerFormsImplementationConfig>();
    var dataSubmissionService = ServiceLocator.Current.GetInstance<DataSubmissionService>();
    var readOnlyModeMessage = dataSubmissionService.GetReadOnlyModeMessage();
    var currentMode = ServiceLocator.Current.GetInstance<IContextModeResolver>().CurrentMode;
}

@{
    async void RenderFormBody()
    {
        var statusDisplay = "hide";
        var message = ViewBag.Message;

        if (!ViewBag.IsWorkingInNonJSMode)
        {
            @await Html.PartialAsync("FormContainerInitScript", Model)
        }

        //Meta data, send along as a SYSTEM information about this form, so this can work without JS
        <input type="hidden" class="Form__Element Form__SystemElement FormHidden FormHideInSummarized" name="__FormGuid" value="@Model.Form.FormGuid" data-f-type="hidden" autocomplete="off" />
        <input type="hidden" class="Form__Element Form__SystemElement FormHidden FormHideInSummarized" name="__FormHostedPage" value="@FormsExtensions.GetCurrentPageLink().ToString()" data-f-type="hidden" autocomplete="off" />
        <input type="hidden" class="Form__Element Form__SystemElement FormHidden FormHideInSummarized" name="__FormLanguage" value="@FormsExtensions.GetCurrentFormLanguage(Model)" data-f-type="hidden" autocomplete="off" />
        <input type="hidden" class="Form__Element Form__SystemElement FormHidden FormHideInSummarized" name="__FormCurrentStepIndex" value="@(ViewBag.CurrentStepIndex ?? " ")" data-f-type="hidden" autocomplete="off" />
        <input type="hidden" class="Form__Element Form__SystemElement FormHidden FormHideInSummarized" name="__FormSubmissionId" value="@ViewBag.FormSubmissionId" data-f-type="hidden" autocomplete="off" />

        @Html.GenerateAntiForgeryToken(Model)
        if (!string.IsNullOrEmpty(Model.Title))
        {
            <h2 class="Form__Title">@Model.Title</h2>
        }
        if (!string.IsNullOrEmpty(Model.Description))
        {
            <aside class="Form__Description">@Model.Description</aside>
        }

        if (ViewBag.FormFinalized || ViewBag.IsProgressiveSubmit)
        {
            statusDisplay = "Form__Success__Message";
        }
        else if (!ViewBag.Submittable && !string.IsNullOrEmpty(message))
        {
            statusDisplay = "Form__Warning__Message";
        }

        if (ViewBag.IsReadOnlyMode && !string.IsNullOrWhiteSpace(readOnlyModeMessage))
        {
            <div class="Form__Status">
                <span class="Form__Readonly__Message" role="alert">
                    @readOnlyModeMessage
                </span>
            </div>
        }

        //area for showing Form's status or validation
        <div class="Form__Status">
            <div role="alert" aria-live="polite" class="Form__Status__Message @statusDisplay" data-f-form-statusmessage>
                @Html.Raw(message)
            </div>
        </div>

        <div data-f-mainbody class="Form__MainBody">
            @{
                var currentStepIndex = ViewBag.CurrentStepIndex == null ? -1 : (int)ViewBag.CurrentStepIndex;
                string stepDisplaying;
            }
            @foreach (var step in Model.Form.Steps.Select((value, i) => new { i, value }))
            {
                stepDisplaying = (currentStepIndex == step.i && !ViewBag.FormFinalized && (bool)ViewBag.IsStepValidToDisplay) ? "" : "hide";
                var stepBlock = (step.value.SourceContent as ElementBlockBase);
                <section id="@step.value.ElementName" data-f-type="step" data-f-element-name="@step.value.ElementName" class="Form__Element FormStep Form__Element--NonData @stepDisplaying" data-f-stepindex="@step.i" data-f-element-nondata>
                    @if (stepBlock != null)
                    {
                        Html.RenderContentData(step.value.SourceContent, false);
                    }
                    <!-- Each FormStep groups the elements below it til the next FormStep -->
                    @{
                        Html.RenderElementsInStep(step.i, step.value.Elements);
                    }
                </section>
            }

            @{
                var currentDisplayStepCount = Model.Form.Steps.Count();
                if (currentDisplayStepCount > 1 && currentStepIndex > -1 && currentStepIndex < currentDisplayStepCount && !ViewBag.FormFinalized)
                {
                    string prevButtonDisableState = (currentStepIndex == 0) || !ViewBag.Submittable ? "disabled" : "";
                    string nextButtonDisableState = (currentStepIndex == currentDisplayStepCount - 1) || !ViewBag.Submittable ? "disabled" : "";
                    if (Model.ShowNavigationBar)
                    {
                        <nav role="navigation" class="Form__NavigationBar" data-f-type="navigationbar" data-f-element-nondata>
                            <button type="submit" name="submit" value="@SubmitButtonType.PreviousStep.ToString()" class="Form__NavigationBar__Action FormExcludeDataRebind btnPrev"
                                    @prevButtonDisableState data-f-navigation-previous>
                                @Html.Translate("/episerver/forms/viewmode/stepnavigation/previous")
                            </button>
                            @{
                                // calculate the progress style on-server-side
                                var currentDisplayStepIndex = currentStepIndex + 1;
                                var progressWidth = (100 * currentDisplayStepIndex / currentDisplayStepCount) + "%";
                            }
                            <div class="Form__NavigationBar__ProgressBar">
                                <div class="Form__NavigationBar__ProgressBar--Progress" style="width:@progressWidth" data-f-navigation-progress></div>
                                <div class="Form__NavigationBar__ProgressBar--Text">
                                    <span class="Form__NavigationBar__ProgressBar__ProgressLabel">@Html.Translate("/episerver/forms/viewmode/stepnavigation/page")</span>
                                    <span class="Form__NavigationBar__ProgressBar__CurrentStep" data-f-navigation-currentstep>@currentDisplayStepIndex</span>/
                                    <span class="Form__NavigationBar__ProgressBar__StepsCount" data-f-navigation-stepcount>@currentDisplayStepCount</span>
                                </div>
                            </div>
                            <button type="submit" name="submit" value="@SubmitButtonType.NextStep.ToString()" class="Form__NavigationBar__Action FormExcludeDataRebind btnNext"
                                    @nextButtonDisableState data-f-navigation-next>
                                @Html.Translate("/episerver/forms/viewmode/stepnavigation/next")
                            </button>
                        </nav>
                    }
                }
            }
        </div>
    }
}

@if (currentMode == ContextMode.Edit)
{
    <link rel="stylesheet" type="text/css" data-f-resource="EPiServerForms.css" href='@EPiServer.Shell.Paths.ToClientResource(typeof(FormsModule), "ClientResources/ViewMode/EPiServerForms.css")' />

    @if (Model.Form != null)
    {
        <div class="EPiServerForms">
            <h2 class="Form__Title">@Html.PropertyFor(m => m.Title) </h2>
            <h4 class="Form__Description">@Html.PropertyFor(m => m.Description)</h4>
            @*NOTE: This temporary fix will prevent inheritance RenderSettings.Tag(e.g.: span12) from the parent view
                which may break our form container block in Edit mode. *@
            @Html.PropertyFor(m => m.ElementsArea, new {Tag = ""})
        </div>
    }
    else
    {
        <div class="EPiServerForms">
            <span class="Form__Warning">@Html.Translate("/episerver/forms/editview/cannotbuildformmodel")</span>
        </div>
    }
}
else
{
    if (Model.Form != null)
    {
        var validationCssClass = ViewBag.ValidationFail ? "ValidationFail" : "ValidationSuccess";

        if (ViewBag.RenderingFormUsingDivElement)
        {
            <div data-f-metadata="@Model.MetadataAttribute" class="EPiServerForms @validationCssClass" data-f-type="form" id="@Model.Form.FormGuid">
                @{ RenderFormBody(); }
            </div>
        }
        else
        {
            <form method="post" novalidate="novalidate"
                  data-f-metadata="@Model.MetadataAttribute"
                  enctype="multipart/form-data" class="EPiServerForms @validationCssClass" data-f-type="form" id="@Model.Form.FormGuid">
                @{ RenderFormBody(); }
            </form>
        }
    }
}
